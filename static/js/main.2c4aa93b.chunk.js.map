{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BACKENDURL","Index","onClick","axios","post","then","res","props","history","push","data","id","React","Component","Checklist","getDataFromDb","fetch","state","json","setState","checklist","fetching","error","updateDescription","event","line","line_id","_id","description","target","value","match","params","bind","style","display","width","justifyContent","addonBefore","onChange","completed","checked","defaultValue","onPressEnter","onBlur","index","this","size","alignItems","flexDirection","map","renderLine","AppRouter","height","backgroundColor","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c4aa93b.chunk.js","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Spin, Checkbox, Button, Input } from 'antd'\nimport 'antd/dist/antd.css';\nimport axios from 'axios';\n\nconst BACKENDURL = 'http://localhost:3001/api';\nclass Index extends React.Component {\n\n    render() {\n        return (<h2>\n            <Button onClick={() => {\n                axios.post(`${BACKENDURL}/createChecklist`)\n                .then((res) => {\n                    this.props.history.push(`/${res.data.id}`)\n                })}}\n            > New Checklist </Button>\n        </h2>);\n    }\n}\n\nclass Checklist extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: props.match.params.id,\n            fetching: true,\n            data: null,\n        }\n\n        this.getDataFromDb = this.getDataFromDb.bind(this);\n\n        this.getDataFromDb();\n        // axios.post('${BACKENDURL}/putData', {\n        //     id: '1231223123212',\n        //     message: 'message',\n        // });\n\n        // setTimeout(() => {\n        //     this.setState({ \n        //         fetching: false,\n        //         data: [\n        //             {\n        //                 completed: false,\n        //                 description: ' af sdlanfiojada ajdoadsmasdma'\n        //             },\n        //             {\n        //                 completed: false,\n        //                 description: ' af sdlanfiojada ajdoadsmasdma1'\n        //             },\n        //             {\n        //                 completed: true,\n        //                 description: ' af sdlanfiojada ajdoadsmasdma2'\n        //             },\n        //         ] })\n        // }, 1000)\n    }\n\n    getDataFromDb = () => {\n        fetch(`${BACKENDURL}/getData/${this.state.id}`)\n          .then((data) => data.json())\n          .then((res) => {\n            if (res.data)\n                this.setState({\n                data: res.data.checklist,\n                fetching: false,\n                })\n            else\n                this.setState({\n                error: true,\n                fetching: false,\n            })\n            });\n      };\n\n    updateDescription = (event, line) => {\n        axios.post(`${BACKENDURL}/updateLineDescription/${this.state.id}`, \n        {\n            line_id: line._id,\n            description: event.target.value\n        })\n        .then((res) => {\n            this.setState({\n                data: res.data.data.checklist,\n            })\n        });\n    }\n    \n    renderLine(line) {\n        return <div style={{\n            display: 'flex',\n            width: '50%',\n            justifyContent: 'space-evenly'\n\n        }}>\n            \n            <Input\n                addonBefore={<Checkbox \n                    onChange={(event) => {\n                        axios.post(`${BACKENDURL}/updateLineCompleted/${this.state.id}`, \n                        {\n                            line_id: line._id,\n                            completed: event.target.checked\n                        })\n                        .then((res) => {\n                            this.setState({\n                                data: res.data.data.checklist,\n                            })\n                        });\n                    }\n                }\n                    checked={line.completed}\n                />}\n                defaultValue={line.description}\n                onPressEnter={(event) => this.updateDescription(event, line)}\n                onBlur={(event) => this.updateDescription(event, line)}\n            />\n        </div>\n    }\n\n    render() {\n        let index = 0;\n        if (this.state.fetching)\n            return <Spin size='large' />;\n        if (this.state.error)\n            return <div>Checklist not found</div>;\n        if (this.state.data) {\n            return (<div style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n                width: '50%'\n            }}>\n                <h2>Checklist {this.state.id}</h2>\n                {this.state.data.map((line) => this.renderLine(line, index++))}\n                <Button onClick={() => {\n                    axios.post(`${BACKENDURL}/addLine/${this.state.id}`)\n                    .then((res) => {\n                        this.setState({\n                            data: res.data.data.checklist,\n                        })\n                    });\n                }} > Add Element </Button>\n            </div>);\n\n        }\n        return <div>EMPTY!</div>\n    }\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div style={{\n          width: '100vw',\n          height: '100vh',\n          backgroundColor: 'lightblue',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n      }}>\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/:id/\" component={Checklist} />\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}